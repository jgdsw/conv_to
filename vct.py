#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.2 on Mon Jun  4 11:10:11 2018
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

import os
import sys
import threading as thr
from wx.lib.pubsub import pub
import cmdscript as c
import conv_to

#-------------------------------------------------------------------------------

BIN = 'bin'
CMD_DL = '{}youtube-dl --restrict-filenames --no-check-certificate --merge-output-format mkv --sub-lang es --proxy "{}" {}'
VCT_SCRIPT = 'VCT_SCRIPT_PUBSUB'
VCT_PROG = 'VCT_SCRIPT_PROGRESS'

#-------------------------------------------------------------------------------

def resource_path():
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.dirname(os.path.abspath(__file__))
    return base_path

#-------------------------------------------------------------------------------

def beautify (txt):
    urls = txt.splitlines()
    if len(urls) != 0:
        urls = [x for x in urls if x != '']
        urls = [x for x in urls if x.find('DONE')<0]
        for url in urls:
                i = urls.index(url)
                urls[i]=url.strip()
        b = '\n'.join(urls)
    else:
        b = ''
    return b

#-------------------------------------------------------------------------------

def get_total (txt):
    total = 0
    urls = txt.splitlines()
    if len(urls) != 0:
        for url in urls:
            if len(url)!=0 and url.find('DONE') < 0:
                total = total + 1
    return total

#-------------------------------------------------------------------------------

def downloadURL (url, proxy, base):
    c.sep('>>> URL: [{}]'.format(url))

    print('*** Downloading file...')

    before = c.get_files()

    cmd = CMD_DL.format(base, proxy, url)
    print ('* {} ...'.format(cmd))
    status = c.call(cmd)
    
    after = c.get_files()
    new = list(set(after) - set(before))

    if len(new) != 0:
        filename=new[0]
        print("*** File: [{}]".format(filename))
    else:
        print("*** File: Already downloaded ...")
        filename='Already downloaded'

    return filename

#-------------------------------------------------------------------------------

def downloadURLs (input_urls, folder, base):
    if input_urls != None:

        if folder != None:

            urls = input_urls.splitlines()

            if len(urls) != 0:
                c.cd(folder)
                proxy = os.getenv('http_proxy','')

                c.sep('>>> vct: URL/s to process: [folder:{}][proxy:{}]'.format(folder, proxy))

                for url in urls:
                    print(url)

                for url in urls:
                    filename = downloadURL(url, proxy, base)
                    wx.CallAfter(pub.sendMessage, VCT_PROG, increment=(url, filename))

                c.sep(">>> vct: JOB Completed!\n\n\n")

#-------------------------------------------------------------------------------

def vct_run(input_urls, folder, base):
    try:
        downloadURLs (input_urls, folder, base)
        exit_status = 0

    except SystemExit as exit:
        if exit.code != 0:
            print('!!! THR Run-Time Error: [{}]'.format(exit.code))
            exit_status = exit.code

    except Exception as exc:
        print('!!! THR Run-Time Exception: [{}]'.format(exc))
        exit_status = exc

    # Send exit status (wx Publish/Subscribe)
    wx.CallAfter(pub.sendMessage, VCT_SCRIPT, status=exit_status)

#-------------------------------------------------------------------------------

def vct_run_thread (input_urls, folder, base):
    try:
        thr_vct_script = thr.Thread(target=vct_run,args=(input_urls, folder, base))
        thr_vct_script.start()
        return 0
    except Exception as exc:
        print('!!! Run-Time Exception: [{}]'.format(exc))
        return(exc)

#-------------------------------------------------------------------------------

class RedirectText(object):
    def __init__(self,aWxTextCtrl):
        self.out=aWxTextCtrl

    def write(self,string):
        #self.out.WriteText(string)
        wx.CallAfter(self.out.WriteText, string)

#-------------------------------------------------------------------------------

class MyVCT(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyVCT.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((800, 600))
        self.list_ctrl = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
        self.button_3 = wx.Button(self, wx.ID_ANY, "Clean files")
        self.button_4 = wx.Button(self, wx.ID_ANY, "Select files")
        self.checkbox_1 = wx.CheckBox(self, wx.ID_ANY, "Verbose log.", style=wx.CHK_2STATE)
        self.checkbox_2 = wx.CheckBox(self, wx.ID_ANY, "Delete original files", style=wx.CHK_2STATE)
        self.checkbox_3 = wx.CheckBox(self, wx.ID_ANY, "Tag video file", style=wx.CHK_2STATE)
        self.checkbox_4 = wx.CheckBox(self, wx.ID_ANY, "Show file info", style=wx.CHK_2STATE)
        self.checkbox_5 = wx.CheckBox(self, wx.ID_ANY, "No audio", style=wx.CHK_2STATE)
        self.checkbox_6 = wx.CheckBox(self, wx.ID_ANY, "No subtitles", style=wx.CHK_2STATE)
        self.checkbox_7 = wx.CheckBox(self, wx.ID_ANY, u"Flip video 180\u00ba", style=wx.CHK_2STATE)
        self.checkbox_8 = wx.CheckBox(self, wx.ID_ANY, "Force conversion", style=wx.CHK_2STATE)
        self.combo_box_FPS = wx.ComboBox(self, wx.ID_ANY, choices=["input", "NTSC", "PAL"], style=wx.CB_DROPDOWN)
        self.combo_box_Container = wx.ComboBox(self, wx.ID_ANY, choices=["mp3", "m4a", "ogg", "avi", "mp4", "mkv"], style=wx.CB_DROPDOWN)
        self.combo_box_Resolution = wx.ComboBox(self, wx.ID_ANY, choices=["input", "std", "VCD", "DVD", "HD", "FHD", "UHD", "DCI"], style=wx.CB_DROPDOWN)
        self.label_progress = wx.StaticText(self, wx.ID_ANY, "", style=wx.ALIGN_RIGHT)
        self.gauge = wx.Gauge(self, wx.ID_ANY, 100)
        self.button_urls = wx.Button(self, wx.ID_ANY, "Clean")
        self.button_log = wx.Button(self, wx.ID_ANY, "Clean log.")
        self.button_OK = wx.Button(self, wx.ID_ANY, "OK")
        self.text_ctrl_log = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.HSCROLL | wx.TE_MULTILINE | wx.TE_READONLY)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.cleanFiles, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.selectFiles, self.button_4)
        self.Bind(wx.EVT_BUTTON, self.CleanURLs, self.button_urls)
        self.Bind(wx.EVT_BUTTON, self.CleanLog, self.button_log)
        self.Bind(wx.EVT_BUTTON, self.ProcessURLs, self.button_OK)
        # end wxGlade

        self.done =  0
        self.total = 0
        self.label_progress.SetLabel('')
        self.gauge.SetValue(0)

        # Redirect STDOUT/STDERR
        redir=RedirectText(self.text_ctrl_log)
        sys.stdout=redir
        sys.stderr=redir

        self.CMDROOT = os.path.join(resource_path(), BIN, '')

         # create pubsub receiver (VCT_SCRIPT Thread)
        pub.subscribe(self.ThrDone, VCT_SCRIPT)
        pub.subscribe(self.ThrProgress, VCT_PROG)

    def __set_properties(self):
        # begin wxGlade: MyVCT.__set_properties
        self.SetTitle("VCT")
        self.list_ctrl.AppendColumn("File", format=wx.LIST_FORMAT_LEFT, width=600)
        self.list_ctrl.AppendColumn("Status", format=wx.LIST_FORMAT_LEFT, width=-1)
        self.combo_box_FPS.SetSelection(0)
        self.combo_box_Container.SetSelection(4)
        self.combo_box_Resolution.SetSelection(0)
        self.label_progress.SetMinSize((40, 15))
        self.text_ctrl_log.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, "Courier"))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyVCT.__do_layout
        sizer_app = wx.BoxSizer(wx.VERTICAL)
        sizer_1 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Log"), wx.HORIZONTAL)
        sizer_buttons = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Commands"), wx.HORIZONTAL)
        sizer_options = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Settings"), wx.HORIZONTAL)
        grid_sizer_1 = wx.GridSizer(4, 4, 0, 0)
        sizer_files = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Files"), wx.VERTICAL)
        grid_sizer_2 = wx.GridSizer(0, 2, 0, 0)
        sizer_files.Add(self.list_ctrl, 3, wx.ALL | wx.EXPAND, 5)
        grid_sizer_2.Add(self.button_3, 0, wx.ALL, 5)
        grid_sizer_2.Add(self.button_4, 0, wx.ALIGN_RIGHT | wx.ALL, 5)
        sizer_files.Add(grid_sizer_2, 0, wx.EXPAND, 0)
        sizer_app.Add(sizer_files, 4, wx.ALL | wx.EXPAND, 0)
        grid_sizer_1.Add(self.checkbox_1, 0, 0, 0)
        grid_sizer_1.Add(self.checkbox_2, 0, 0, 0)
        grid_sizer_1.Add(self.checkbox_3, 0, 0, 0)
        grid_sizer_1.Add(self.checkbox_4, 0, 0, 0)
        grid_sizer_1.Add(self.checkbox_5, 0, 0, 0)
        grid_sizer_1.Add(self.checkbox_6, 0, 0, 0)
        grid_sizer_1.Add(self.checkbox_7, 0, 0, 0)
        grid_sizer_1.Add(self.checkbox_8, 0, 0, 0)
        FPS = wx.StaticText(self, wx.ID_ANY, "FPS:")
        grid_sizer_1.Add(FPS, 0, 0, 0)
        label_1 = wx.StaticText(self, wx.ID_ANY, "Container:")
        grid_sizer_1.Add(label_1, 0, 0, 0)
        label_2 = wx.StaticText(self, wx.ID_ANY, "Resolution:")
        grid_sizer_1.Add(label_2, 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add(self.combo_box_FPS, 0, 0, 0)
        grid_sizer_1.Add(self.combo_box_Container, 0, 0, 0)
        grid_sizer_1.Add(self.combo_box_Resolution, 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        sizer_options.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_app.Add(sizer_options, 0, wx.EXPAND, 0)
        sizer_buttons.Add(self.label_progress, 0, wx.ALL, 5)
        sizer_buttons.Add(self.gauge, 9, wx.ALL | wx.EXPAND, 5)
        sizer_buttons.Add(self.button_urls, 0, wx.ALL, 5)
        sizer_buttons.Add(self.button_log, 0, wx.ALL, 5)
        sizer_buttons.Add(self.button_OK, 0, wx.ALL, 5)
        sizer_app.Add(sizer_buttons, 0, wx.EXPAND, 0)
        sizer_1.Add(self.text_ctrl_log, 1, wx.ALL | wx.EXPAND, 5)
        sizer_app.Add(sizer_1, 2, wx.EXPAND, 0)
        self.SetSizer(sizer_app)
        self.Layout()
        # end wxGlade

    def SetDirDialog(self, event):  # wxGlade: MyVCT.<event_handler>
        dialog = wx.DirDialog(None, "Choose a directory:",style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
        if dialog.ShowModal() == wx.ID_OK:
            self.text_ctrl_path.SetValue(dialog.GetPath())
        dialog.Destroy()
        event.Skip()

    def ExitApp(self, event):  # wxGlade: MyVCT.<event_handler>
        self.Close()
        event.Skip()

    def ProcessURLs(self, event):  # wxGlade: MyVCT.<event_handler>
        input = self.text_ctrl_urls.GetValue()
        input = beautify(input)
        self.text_ctrl_urls.SetValue(input)
        path = self.text_ctrl_path.GetValue()
        self.text_ctrl_log.SetValue('')
        self.total = get_total(input)
        self.done = 0
        self.gauge.SetValue(0)
        self.label_progress.SetLabel('')

        if self.total!=0 and len(path)!=0:
            status = vct_run_thread(input_urls=input, folder=path, base=self.CMDROOT)
            if status != 0:
                wx.MessageBox('Error launching operation:\n{}'.format(status), 'Error', wx.OK | wx.ICON_ERROR)
            else:
                self.button_OK.Disable()
                self.button_log.Disable()
                self.button_urls.Disable()
        else:
            wx.MessageBox('Not enough parameters set (URLs / Output location)', 'Warning', wx.OK | wx.ICON_WARNING)

        event.Skip()

    def ThrDone(self, status):
        if status != 0:
            wx.MessageBox('VCT Operation could not be completed:\n{}'.format(status), 'Error', wx.OK | wx.ICON_ERROR)

        self.button_OK.Enable()
        self.button_log.Enable()
        self.button_urls.Enable()

    def ThrProgress(self, increment):
        self.done = self.done+1
        perc=(self.done/self.total)*100
        info = '({:02d}/{:02d}) {} [DONE! File:{}]'.format(self.done, self.total, increment[0], increment[1])

        urls=self.text_ctrl_urls.GetValue().splitlines()
        if increment[0] in urls:
            i = urls.index(increment[0])
            urls[i] = info
        str_urls = '\n'.join(urls)

        self.label_progress.SetLabel('{:.0f}%'.format(perc))
        self.gauge.SetValue(perc)
    
        wx.CallAfter(self.text_ctrl_urls.SetValue, str_urls)
        wx.Yield()

    def CleanURLs(self, event):  # wxGlade: MyVCT.<event_handler>
        self.text_ctrl_urls.SetValue('')
        self.gauge.SetValue(0)
        self.label_progress.SetLabel('')
        event.Skip()

    def CleanLog(self, event):  # wxGlade: MyVCT.<event_handler>
        self.text_ctrl_log.SetValue('')
        self.gauge.SetValue(0)
        self.label_progress.SetLabel('')
        event.Skip()

    def cleanFiles(self, event):  # wxGlade: MyVCT.<event_handler>
        print("Event handler 'cleanFiles' not implemented!")
        event.Skip()
    def selectFiles(self, event):  # wxGlade: MyVCT.<event_handler>
        print("Event handler 'selectFiles' not implemented!")
        event.Skip()
# end of class MyVCT

class vct(wx.App):
    def OnInit(self):
        self.VCT = MyVCT(None, wx.ID_ANY, "")
        self.SetTopWindow(self.VCT)
        self.VCT.Show()
        return True

# end of class vct

if __name__ == "__main__":
    vct = vct(0)
    vct.MainLoop()
